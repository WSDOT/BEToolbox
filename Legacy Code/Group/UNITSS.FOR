C///////////////////////////////////////////////////////////////////////
C// BEToolbox - Bridge Engineering Toolbox
C// Copyright (C) 2000, Washington State Department of Transportation
C//                     Bridge and Structures Office
C//
C// This software was developed as part of the Alternate Route Project
C//
C// This program is free software; you can redistribute it and/or modify
C// it under the terms of the Alternate Route Open Source License as
C// published by the Washington State Department of Transportation,
C// Bridge and Structures Office.
C//
C// This program is distributed in the hope that it will be useful,
C// but is distributed AS IS, WITHOUT ANY WARRANTY; without even the
C// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
C// PURPOSE.  See the Alternate Route Open Source License for more details.
C//
C// You should have received a copy of the Alternate Open Source License
C// along with this program; if not, write to the Washington State
C// Department of Transportation, Bridge and Structures Office,
C// 4500 3rd Ave SE, P.O. Box 47340, Olympia, WA 98503, USA or e-mail
C// Bridge_Support@wsdot.wa.gov
C///////////////////////////////////////////////////////////////////////

      SUBROUTINE UNITSS(UNITS)
C
C     REVISION LOG:
C
C     RICHARD BRICE - RECOMPILED FOR VMS VERSION 5.5 - 04/27/93
C
C     ...THIS SUBROUTINE STORES LABELS FOR OUTPUT ACCORDING TO
C        THE UNITS SELECTED.
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      CHARACTER*8 A5,A6,A7,A8,A9,A10,A11,B1,B2,B3,B4,C1,C2,C3,C4
     1           ,D1,D2,D3,D4
      CHARACTER*8 UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11
      CHARACTER*4 ISYSTM
      COMMON /BLOC14/ UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11,
     1 ISYSTM
      INTEGER UNITS
      DATA A5/'/'/,A6/'-'/,A7/'**'/,A8/'2'/,A9/'3'/,A10/'4'/,A11/'RAD'/
      DATA B1/'  M'/,B2/'  KN'/,B3/' M'/,B4/' KN'/
      DATA C1/'  L'/,C2/'   F'/,C3/' L'/,C4/'  F'/
      DATA D1/' IN'/,D2/' LBS'/,D3/'IN'/,D4/'LBS'/
C
      UN5=A5
      UN6=A6
      UN7=A7
      UN8=A8
      UN9=A9
      UN10=A10
      UN11=A11
      IF (UNITS) 10,20,30
   10 UN1=B1
      UN2=B2
      UN3=B3
      UN4=B4
      RETURN
   20 UN1=C1
      UN2=C2
      UN3=C3
      UN4=C4
      RETURN
   30 UN1=D1
      UN2=D2
      UN3=D3
      UN4=D4
      RETURN
C
      END
      SUBROUTINE MULT ( A, B, C, ISIZE )
C
C
C     THIS IS A SHORT PROGRAM TO PERFORM THE MATRIX MULTIPLICATION
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      DIMENSION A(3, 3), B(3, 3), C(3, 3)
      DO 20 I=1,3
      DO 20 J=1,ISIZE
      A(I,J)=0.0
      DO 10 K=1,3
      A(I,J)=A(I,J)+B(I,K)*C(K,J)
   10 CONTINUE
   20 CONTINUE
      RETURN
C
      END
      SUBROUTINE FVEC ( VECTOR )
C
C                                                                      F
C     THIS ROUTINE SOLVES FOR THE AXIAL AND LATERAL REACTION AND FOR
C     THE MOMENT AT THE TOP OF INDIVIDUAL PILES.
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      REAL*8 K
      CHARACTER*8 TC
      DIMENSION VECTOR(3,1), U(3,3), UT(3,3), S(3, 1), US(3, 1)
      COMMON / BLOC00 / TC(20)
      COMMON / BLOC04 / POTT(20),
     1                  DISTB(20),DISTA(20),THETA(20),DPS(20),
     2                  FDBET(20),KNPL,KP(20),KA(20),KS(20)
      COMMON / BLOC12 / KFLAG, KEY, KIG, KOI, KAX, KAR, KNODE
      COMMON / BLOC15 / R(307), REACT(307), BM(307), H, HE2,
     1                  MOP, N, NP4, MPLAST
      COMMON /BLOC03/ ES(307),Y(307),LAYER(10),K(10)
      COMMON / BLOC16 / ZZZ(5,25), SSS(5,25), DV(3,1), II(5)
      COMMON / BLOC17 / PDV(3, 1)
C
      DO 10 I=1,3
   10 VECTOR(I,1)=0.0
      DO 40 I=1,KNPL
      U(1,1)=DCOS(THETA(I))
      U(1,2)=-DSIN(THETA(I))
      U(1,3)=0.0
      U(2,1)=-U(1,2)
      U(2,2)=U(1,1)
      U(2,3)=0.0
      U(3,1)=DISTB(I)*U(2,1)-DISTA(I)*U(1,1)
      U(3,2)=DISTB(I)*U(1,1)+DISTA(I)*U(2,1)
      U(3,3)=1.0
      DO 20 J=1,3
      DO 20 KO=1,3
   20 UT(J,KO)=U(KO,J)
      CALL MULT (PDV,UT,DV,1)
      CALL AXIAL (I,PX)
      IF (KNODE.EQ.1) CALL NODE (I)
      CALL LLP (I,PDV(2,1),PDV(3,1),PX,SRES)
      S(1,1)=PX*POTT(I)
      S(2,1)=SRES*POTT(I)
      S(3,1)=BM(4)*POTT(I)
      CALL MULT (US,U,S,1)
      DO 30 J=1,3
   30 VECTOR(J,1)=VECTOR(J,1)+US(J,1)
   40 CONTINUE
      RETURN
C
      END
      SUBROUTINE NODE(IT)
C
C
C     THIS ROUTINE DOES THE FOLLOWING:
C        1)  CALCULATES THE COORDINATE FOR EACH NODE ON THE PILE
C        2)  DETERMINES THE NODE NUMBER OF THE TOP NODE AND BOTTOM NODE
C            IN EACH LAYER OF SOIL
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      REAL*8 LENGTH,K
      CHARACTER*8 TC
      CHARACTER*4 ISYSTM
      CHARACTER*8 UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11
C
      COMMON / BLOC00 / TC(20)
      COMMON / BLOC04 / POTT(20),
     1                  DISTB(20),DISTA(20),THETA(20),DPS(20),
     2                  FDBET(20),KNPL,KP(20),KA(20),KS(20)
      COMMON / BLOC07 / XINC(20), YIELD(20), YOUNG(20),
     1                  NDS(20), NI(20), KTYPE(20)
      COMMON / BLOC12 / KFLAG, KEY, KIG, KOI, KAX, KAR, KNODE
      COMMON /BLOC01/ XN(20,307),DIAM,PI,EM14,EM6,EM5,LENGTH(20),NN
      COMMON /BLOC02/ XTOP(10),XBOT(10),XGS,NL,ITOP(10),IBOT(10)
      COMMON /BLOC03/ ES(307),Y(307),LAYER(10),K(10)
      COMMON /BLOC05/ TOLP,KSOIL(10),ITOPL,IBOTL,MAXIT
      COMMON /BLOC14/ UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11,
     1 ISYSTM
C
C
C     ...COMPUTE THE NUMBER OF NODES
      IC=KP(IT)
      NN=NI(IC)+1
C
C     ...COMPUTE PILE INCREMENT LENGTH
      RNI=NN-1
      XINC(IC)=LENGTH(IC)/RNI
C     ...ASSIGN THE TOP NODE OF THE PILE AS THE ORIGIN OF THE COORDINATE
C        SYSTEM, I.E. THE ZERO COORDINATE
      XN(IC,1)=0.
C
      IF (KIG.EQ.0) GO TO 20
      DO 10 I=2,NN
   10 XN(IC,I)=XN(IC,I-1)+XINC(IC)
      RETURN
C
C     ...ASSIGN VALUE TO COORDINATE IN IMAGINERY LOWER LAYER
   20 XTOP(NL+1)=XBOT(NL)
C     ...INITIALIZE THE LAYER NUMBER
      L=1
C
C     ...CALCULATE A COORDINATE FOR EACH NODE
C
      DO 40 I=1,NN
      IF (I.EQ.1) GO TO 30
      XN(IC,I)=XN(IC,I-1)+XINC(IC)
      IF (XN(IC,I).LE.XBOT(NL)) GO TO 30
      WRITE (6,60) LENGTH(IC),UN1
      STOP 2
C
C     ...ASSIGN A NODE  NUMBER TO THE TOP OF EACH LAYER
C
   30 IF (XN(IC,I).LT.XTOP(L)) GO TO 40
      ITOP(L)=I
      IF (L.GT.NL) GO TO 40
      L=L+1
   40 CONTINUE
C
C     ...ASSIGN NODE NUMBERS OF BOTTOM OF EACH LAYER
      NLL=NL+1
      DO 50 LL=2,NLL
      IBOT(LL-1)=ITOP(LL)-1
   50 CONTINUE
      IBOT(NL)=NN
      RETURN
C
   60 FORMAT (///5X,21H**** FATAL ERROR ****/5X,17HTHE PILE LENGTH, ,D10
     1.2,19H, EXTENDS BELOW THE/5X,28HBOTTOM OF THE DEEPEST LAYER.)
C
      END
      SUBROUTINE AXIAL ( I, PX )
C
C
C     THIS ROUTINE INTERPOLATES THE AXIAL PILE TOP REACTION FROM THE
C     AXIAL PILE TOP DISPLACEMENT CURVE.
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      CHARACTER*8 TC
      COMMON / BLOC00 / TC(20)
      COMMON / BLOC04 / POTT(20),
     1                  DISTB(20),DISTA(20),THETA(20),DPS(20),
     2                  FDBET(20),KNPL,KP(20),KA(20),KS(20)
      COMMON / BLOC12 / KFLAG, KEY, KIG, KOI, KAX, KAR, KNODE
      COMMON / BLOC16 / ZZZ(5,25), SSS(5,25), DV(3,1), II(5)
      COMMON / BLOC17 / PDV(3, 1)
C
      IF (PDV(1,1).NE.0.) GO TO 10
      RETURN
   10 ND=KA(I)
      IT=II(ND)
      KAR=0
      DO 20 J=2,IT
      IF (PDV(1,1).LE.ZZZ(ND,J)) GO TO 30
   20 CONTINUE
      WRITE (6,50) I
      KAR=1
      RETURN
   30 IF (PDV(1,1).GE.ZZZ(ND,1)) GO TO 40
      WRITE (6,60) I
      KAR=1
      RETURN
   40 KKK=J-1
      PX=SSS(ND,KKK)+(SSS(ND,J)-SSS(ND,KKK))*(PDV(1,1)-ZZZ(ND,KKK))/(ZZZ
     1(ND,J)-ZZZ(ND,KKK))
      RETURN
C
   50 FORMAT (//5X,34HFAILURE IN BEARING      PILE GROUP,I5)
   60 FORMAT (//5X,34HFAILURE IN PULL OUT     PILE GROUP,I5)
C
      END
      SUBROUTINE LLP ( ITYPE, YT, ALPHA, PX, SRES )
C
C
C     THIS ROUTINE SOLVES FOR THE LATERAL REACTION AND THE MOMENT OF
C     A LATERALLY LOADED PILE FOR THE GIVEN DISPLACEMENT BY THE
C     FINITE DIFFERENCE METHOD
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      CHARACTER*8 TC1,TC2,TC
      CHARACTER*8 UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11
      CHARACTER*4 ISYSTM
      REAL*8 LENGTH, K
      DIMENSION A(307), B(307), C(307), DY(307), DBM(307), RES(307),
     1         ESS(307),YY(307), P(307), STRESS(307),WC(307)
C
      COMMON / BLOC00 / TC(20)
      COMMON / BLOC04 / POTT(20),
     1                  DISTB(20),DISTA(20),THETA(20),DPS(20),
     2                  FDBET(20),KNPL,KP(20),KA(20),KS(20)
      COMMON / BLOC07 / XINC(20), YIELD(20), YOUNG(20),
     1                  NDS(20), NI(20), KTYPE(20)
      COMMON / BLOC10 / XX1(20,5), XX2(20,5), RRI(20,5),
     1                  SIZE(20,5), AREA(20,5), XRI(20,5),
     2                  BULT(20,5,20), PULT(20,5,20), NINTER(20,5)
      COMMON / BLOC12 / KFLAG, KEY, KIG, KOI, KAX, KAR, KNODE
      COMMON / BLOC15 / R(307), REACT(307), BM(307), H, HE2,
     1                  MOP, N, NP4, MPLAST
      COMMON /BLOC03/ ES(307),Y(307),LAYER(10),K(10)
      COMMON /BLOC01/ XN(20,307),DIAM,PI,EM14,EM6,EM5,LENGTH(20),NN
      COMMON /BLOC02/ XTOP(10),XBOT(10),XGS,NL,ITOP(10),IBOT(10)
      COMMON /BLOC05/ TOLP,KSOIL(10),ITOPL,IBOTL,MAXIT
      COMMON /BLOC06/ XW(10),WW(10),W(307),NW
      COMMON /BLOC09/ YINC,XSP(10),RCYCL,KTHRU,KCYCL,KPYOP,IT,IGP
      COMMON /BLOC14/ UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11,
     1                ISYSTM
      COMMON / BLOC17 / PDV(3, 1)
      COMMON /BLOC18/ YE(307)
C
      DATA TC1/'PIN'/,TC2/'FIX'/
C
C-----START EXECUSION OF PROGRAM
C
C-----COMPUTE CONSTANTS AND INDEXES
      IT=ITYPE
      MOP=KP(IT)
      ITER=1
      G=FDBET(IT)
      H=XINC(MOP)
      N=NI(MOP)
      H2=H+H
      HE2=H*H
      HE4=HE2*HE2
      NP4=N+4
      NP5=N+5
      NP6=N+6
      NP7=N+7
C-----CLEAR THE STORAGE PLACES
      DO 10 J=1,NP7
      R(J)=0.0
      YE(J)=0.0
      P(J)=0.0
      ESS(J)=0.0
      WC(J)=0.0
   10 CONTINUE
C
C-----ASSIGN INITIAL SOIL MODULUS VALUES WITH INPUT P-Y CURVES
C
      IF (KIG.EQ.0) GO TO 30
      DO 20 J=4,NP4
      XJ=J-4
   20 ESS(J)=XJ*H
      GO TO 60
C
C-----ASSIGN INITIAL SOIL MODULUS VALUES WITH NO INPUT P-Y CURVES
C
   30 L=1
      DO 50 I=4,NP4
      IJ=I-3
      IF (XN(MOP,IJ).LT.XTOP(L)) GO TO 40
      IF (L.GT.NL) GO TO 40
      L=L+1
   40 ESS(I)=0.0
      DEPTH=XN(MOP,IJ)-DPS(IT)
      IF (L.GT.1) ESS(I)=K(L-1)*DEPTH
   50 CONTINUE
C
C-----COMPUTE FLEXUAL STIFFNESS R=EI
   60 DO 70 J=4,NP4
      P(J)=PX
      R(J)=RRI(MOP,1)
   70 CONTINUE
C-----SET RECURSION COEFFICIENTS AT STATIONS 1, 2 AND 4
      A(1)=0.0
      B(1)=0.0
      C(1)=0.0
      A(2)=0.0
      B(2)=0.0
      C(2)=0.0
      A(4)=YT
      B(4)=0.0
      C(4)=0.0
C-----RECURSION COEFFICIENT AT STATION 3
      IF (TC(1).EQ.TC1) GO TO 90
      IF (TC(1).EQ.TC2) GO TO 80
C-----ELASTICALLY RESTRAINED TOP
      DENOM=G*H+2.0*R(4)
      A(3)=(4.0*R(4)*YT-2.0*ALPHA*G*HE2)/DENOM
      B(3)=0.0
      C(3)=(G*H-2.0*R(4))/DENOM
      GO TO 100
C-----FIXED TOP
   80 A(3)=-2.0*ALPHA*H
      B(3)=0.0
      C(3)=1.0
      GO TO 100
C-----PINNED TOP
   90 A(3)=2.0*YT
      B(3)=0.0
      C(3)=-1.0
  100 CONTINUE
C-----COMPUTE RECURSION COEFFICIENTS AT ALL STATIONS
  110 DO 140 J=5,NP5
      AA=R(J-1)
      BB=-2.0*R(J-1)-2.0*R(J)+P(J)*HE2
      CC=R(J-1)+4.0*R(J)+R(J+1)-2.0*P(J)*HE2+ESS(J)*HE4
      DD=-2.0*R(J)-2.0*R(J+1)+P(J)*HE2
      EE=R(J+1)
C-----COMPUTE RECURSION COEFFICIENTS AT EACH STATION J
      E=AA*B(J-2)+BB
      DENOM=E*B(J-1)+AA*C(J-2)+CC
      IF (DENOM.NE.0.) GO TO 120
C-----IF DENOM IS ZERO BEAM DOES NOT EXIST DE= 0
      DE=0.0
      GO TO 130
  120 DE=-1.0/DENOM
  130 C(J)=DE*EE
      B(J)=DE*(E*C(J-1)+DD)
      A(J)=DE*(E*A(J-1)+AA*A(J-2))
  140 CONTINUE
C-----PRESERVE PREVIOUS Y AND COMPUTE NEW Y
      DO 150 J=4,NP4
      YY(J)=YE(J)
  150 CONTINUE
      YE(NP6)=0.0
      YE(NP7)=0.0
      DO 160 L=3,NP7
      J=N+8-L
      YE(J)=A(J)+B(J)*YE(J+1)+C(J)*YE(J+2)
  160 CONTINUE
C-----RESET EI VALUES
      CALL FLXRIG
      IF (KAX.EQ.0) GO TO 170
      RETURN
  170 CONTINUE
C-----CHECK FOR CLOSURE OF DEFLECTION Y AT ALL STATIONS
      DO 180 J=4,NP4
      IF (DABS(YY(J)-YE(J)).GE.TOLP) GO TO 200
  180 CONTINUE
      IF (KFLAG.EQ.0) GO TO 190
      IF (MPLAST.EQ.0) GO TO 190
      WRITE (6,480) IT
  190 CONTINUE
      GO TO 310
  200 ITER=ITER+1
      IF (ITER.LE.MAXIT) GO TO 210
      WRITE (6,490) MAXIT,IT
      KEY=1
      STOP 3
C
C-----BRANCH TO SUBROUTINE INPY WHEN P-Y CURVES ARE INPUT
C
  210 IF (KIG.EQ.0) GO TO 240
      DO 220 I=4,NP4
  220 Y(I)=YE(I)
      CALL INPY (IT)
      DO 230 I=4,NP4
  230 ESS(I)=ES(I)
      GO TO 270
C
C-----RESET NODE NUMBERS FOR TWO DIFFERENT NUMBERING SYSTEMS IN
C     THE TWO PROGRAMS GROUP AND COM624
  240 DO 250 J=4,NP4
  250 Y(J-3)=YE(J)
C
C     COMPUTE NEW SET OF ES VALUES
C
      CALL ESCALL (MOP)
C
      DO 260 J=4,NP4
      YE(J)=Y(J-3)
  260 ESS(J)=ES(J-3)
C
C     ...ASSIGN VALUES OF DISTRIBUTED LOAD TO EACH POINT ON THE PILE
C        AND MODIFY ES VALUES
C
  270 IF (NW.EQ.0) GO TO 110
      IF (ITER.NE.2) GO TO 290
      CALL DISTR (MOP)
      DO 280 I=4,NP4
  280 WC(I)=W(I-3)
  290 DO 300 J=4,NP4
      IF (YE(J).EQ.0.) GO TO 300
      ESS(J)=ESS(J)+WC(J)/YE(J)
  300 CONTINUE
      GO TO 110
C
C-----COMPUTE SLOPE, BM, SHEAR,  REACTION AND OUTER FIBER TOTAL STRESS
  310 CONTINUE
      BM(2)=0.0
      BM(NP6)=0.0
      DO 320 J=3,NP5
      DY(J)=(YE(J+1)-YE(J-1))/H2
      BM(J)=-R(J)*(YE(J-1)-2.0*YE(J)+YE(J+1))/HE2
  320 CONTINUE
      DO 330 J=3,NP5
      DBM(J)=-(BM(J+1)-BM(J-1))/H2+P(J)*DY(J)
  330 CONTINUE
C-----SUM UP SOIL REACTION
      DO 350 J=4,NP4
      IF (NW.EQ.0) GO TO 340
C
C-----RE-DEFINE ES TO WHERE IT IS THE SOIL MODULUS ONLY AND DOES
C     NOT INCLUDE THE EFFECT OF THE DISTRIBUTED LOAD
C
      IF (YE(J).EQ.0.) GO TO 340
      ESS(J)=ESS(J)-WC(J)/YE(J)
  340 RES(J)=ESS(J)*YE(J)
  350 CONTINUE
      SRESL=0.0
      DO 380 KO=4,NP4
      IF (KO.EQ.4) GO TO 360
      IF (KO.EQ.NP4) GO TO 360
      SRESL=SRESL+RES(KO)*H
      GO TO 370
  360 SRESL=SRESL+RES(KO)*H/2.0
  370 KB=KO-3
      XL=XN(MOP,KB)
      STRESS(KO)=(DABS(BM(KO))*D(MOP,XL))/(2.*XRII(MOP,XL))+DABS(PX)/ARE
     1A1(MOP,XL)
  380 CONTINUE
      SRES=SRESL
      IF (KFLAG.EQ.0) GO TO 400
      WRITE (6,500) IT
      WRITE (6,440)
      WRITE (6,450) UN3,UN3,UN4,UN4,UN4,UN6,UN3,UN4,UN5,UN3,UN7,UN8
      WRITE (6,460) PDV(1,1),YE(4),DY(4),PX,SRES,BM(4),STRESS(4)
      IF (KOI.EQ.0) GO TO 400
C-----PRINT OUT ALL THE PILE STATIONS
      WRITE (6,470)
      WRITE (6,420) UN3,UN3,UN4,UN6,UN3,UN4,UN4,UN5,UN3,UN4,UN5,UN3,UN7,
     1UN8,UN4,UN5,UN3,UN4,UN6,UN3,UN7,UN8,UN4,UN5,UN3,UN7,UN8
      DBM(4)=SRES
      DO 390 J=4,NP4
      ISTA=J-4
      ZI=ISTA
      X=ZI*H
      WRITE (6,430) X,YE(J),DY(J),BM(J),DBM(J),RES(J),STRESS(J),WC(J),R(
     1J),ESS(J)
  390 CONTINUE
      WRITE (6,410) ITER
  400 CONTINUE
      RETURN
C
  410 FORMAT (/,1X,30HNUMBER OF ITERATIONS IN LLP = ,I5)
  420 FORMAT (4X,7HXCOORD,,A2,3X,7HDEFLEC,,A2,5X,5HSLOPE,5X,3HBM,,A3,A1,
     1A2,3X,6HSHEAR,,A3,3X,2HP,,A3,A1,A2,2X,7HSTRESS,,A3,A1,A2,A2,A1,2X,
     27HDIS LO,,A3,A1,A2,2X,3HEI,,A3,A1,A2,A2,A1,2X,3HES,,A3,A1,A2,A2,A1
     3,/)
  430 FORMAT (1X,6D12.4,2X,D12.4,4X,D12.4,2X,D12.4,3X,D12.4)
  440 FORMAT (//10X,36HPILE TOP DISPLACEMENTS AND REACTIONS,/)
  450 FORMAT (13X,7HXDISPL,,A2,6X,7HYDISPL,,A2,8X,5HSLOPE,5X,6HAXIAL,,A3
     1,4X,4HLAT,,A3,4X,3HBM,,A3,A1,A2,3X,7HSTRESS,,A3,A1,A2,A2,A1,/)
  460 FORMAT (10X,D12.4,3X,D12.4,3X,4D12.4,3X,D12.4)
  470 FORMAT (//10X,21HLATERALLY LOADED PILE,/)
  480 FORMAT (/10X,32HPLASTIC HINGE IS FORMED IN GROUP,I5)
  490 FORMAT (/////10X,26HNO CLOSURE OF A LLP AFTER ,I5,2X,10HITERATIONS
     1,10X,10HPILE GROUP,I3)
  500 FORMAT (//7X,14H* PILE GROUP *,I3)
C
      END
      SUBROUTINE FLXRIG
C
C
C     THIS ROUTINE CALCULATES THE FLEXUAL RIGIDITY EI AT ALL THE
C     STATIONS.IF AN INTERACTION DIAGRAM OF THE YIELD AXIAL FORCE
C     AND THE PLASTIC MOMENT IS GIVEN,THE SUBROUITNE RESETS THE
C     EI VALUE FOR THE PLASTIC HINGES.
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      CHARACTER*8 TC
      DIMENSION CURV(307)
      COMMON / BLOC00 / TC(20)
      COMMON / BLOC04 / POTT(20),
     1                  DISTB(20),DISTA(20),THETA(20),DPS(20),
     2                  FDBET(20),KNPL,KP(20),KA(20),KS(20)
      COMMON / BLOC07 / XINC(20), YIELD(20), YOUNG(20),
     1                  NDS(20), NI(20), KTYPE(20)
      COMMON / BLOC10 / XX1(20,5), XX2(20,5), RRI(20,5),
     1                  SIZE(20,5), AREA(20,5), XRI(20,5),
     2                  BULT(20,5,20), PULT(20,5,20), NINTER(20,5)
      COMMON / BLOC12 / KFLAG, KEY, KIG, KOI, KAX, KAR, KNODE
      COMMON / BLOC15 / R(307), REACT(307), BM(307), H, HE2,
     1                  MOP, N, NP4, MPLAST
      COMMON /BLOC18/ YE(307)
      COMMON / BLOC17 / PDV(3, 1)
C
C-----SET CONSTANTS
      AX=DABS(PDV(3,1))
      KAX=0
      MATL=KTYPE(MOP)
      NDSX=NDS(MOP)
      MPLAST=0
      IF (MATL.EQ.5) GO TO 10
      GO TO 50
C-----LINEARLY ELASTIC PILE MATERIAL
   10 CONTINUE
      DO 40 I=4,NP4
      X=I-4
      XSTA=X*H
      DO 20 J=1,NDSX
      IF (XX2(MOP,J).GE.XSTA) GO TO 30
   20 CONTINUE
   30 R(I)=RRI(MOP,J)
   40 CONTINUE
      RETURN
C-----BILINEARLY ELASTIC PILE MATERIAL
   50 CONTINUE
      DO 120 I=4,NP4
      C=(YE(I+1)-2.0*YE(I)+YE(I-1))/HE2
      CURV(I)=DABS(C)
C-----CHECK IF AXIAL LOAD EXCEEDS PILE STRENGTH
      IF (AX.LE.PULT(MOP,1,1)) GO TO 60
      WRITE (6,130)
      KAX=1
      RETURN
   60 CONTINUE
C-----DETERMINE THE PILE SECTION
      X=I-4
      XSTA=X*H
      DO 70 J=1,NDSX
      IF (XX2(MOP,J).GE.XSTA) GO TO 80
   70 CONTINUE
   80 R(I)=RRI(MOP,J)
      INTER=NINTER(MOP,J)
      DO 90 KO=2,INTER
      IF (PULT(MOP,J,KO).LE.AX) GO TO 100
   90 CONTINUE
  100 BMP=BULT(MOP,J,KO)+(BULT(MOP,J,KO-1)-BULT(MOP,J,KO))*(AX-PULT(MOP,
     1J,KO))/(PULT(MOP,J,KO-1)-PULT(MOP,J,KO))
C-----CHECK IF MOMENT EXCEEDS PLASTIC MOMENT
      BM(I)=R(I)*CURV(I)
      IF (BM(I).GT.BMP) GO TO 110
      GO TO 120
  110 R(I)=BMP/CURV(I)
      MPLAST=1
  120 CONTINUE
      RETURN
C
  130 FORMAT (///5X,32HAXIAL LOAD EXCEEDS PILE STRENGTH)
C
      END
      SUBROUTINE DISTR(MOP)
C
C
C     THIS ROUTINE ASSIGNS A VALUE FOR DISTRIBUTED LOAD TO EACH NODE
C     ALONG THE PILE.  VALUES ARE ASSIGNED BY LINEAR INTERPOLATION
C     BETWEEN POINTS ON THE INPUT CURVE.  VALUES ABOVE AND BELOW THE
C     RANGE OF THE INPUT CURVE ARE ASSIGNED A ZERO VALUE.
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      REAL*8 LENGTH
      COMMON /BLOC01/ XN(20,307),DIAM,PI,EM14,EM6,EM5,LENGTH(20),NN
      COMMON /BLOC06/ XW(10),WW(10),W(307),NW
C
C     ...INITIALIZE SUBCRIPT FOR VALUES ON INPUT CURVE OF DISTR. LOAD
      JW=2
      IC=MOP
C
C     ...DETERMINE WHAT RANGE EACH NODE LIES IN
C
      DO 50 I=1,NN
      IF (XN(IC,I).LT.XW(1).OR.XN(IC,I).GT.XW(NW)) GO TO 40
   10 IF (XN(IC,I).LT.XW(JW)) GO TO 20
      JW=JW+1
      GO TO 10
C     ...INTERPOLATE BETWEEN POINTS ON INPUT CURVE
   20 DX=XW(JW)-XW(JW-1)
      IF (DABS(DX).LT.EM5) GO TO 30
      SL=(WW(JW)-WW(JW-1))/DX
      W(I)=WW(JW-1)+SL*(XN(IC,I)-XW(JW-1))
      GO TO 50
   30 W(I)=(WW(JW)+WW(JW-1))/2.
      GO TO 50
C     ...ASSIGN ZERO TO ALL NODES OUTSIDE RANGE OF INPUT DATA
   40 W(I)=0.
   50 CONTINUE
      RETURN
C
      END
      SUBROUTINE INPY(NOP)
C
C
C     THIS ROUTINE YIELDS SOIL MODULUS VALUES BY INTERPOLATING ON INPUT
C     P-Y CURVES FOR THE LAYERS WHERE INDICATED BY INPUT CODE.
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      REAL*8 LENGTH,K
      CHARACTER*8 TC
      DIMENSION EST(20)
C
C
      COMMON / BLOC00 / TC(20)
      COMMON / BLOC04 / POTT(20),
     1                  DISTB(20),DISTA(20),THETA(20),DPS(20),
     2                  FDBET(20),KNPL,KP(20),KA(20),KS(20)
      COMMON /BLOC11/ XS(5,20),YC(5,20,25),PC(5,20,25),NC(5),NP(5,20)
      COMMON /BLOC01/ XN(20,307),DIAM,PI,EM14,EM6,EM5,LENGTH(20),NN
      COMMON /BLOC03/ ES(307),Y(307),LAYER(10),K(10)
      COMMON / BLOC12 / KFLAG, KEY, KIG, KOI, KAX, KAR, KNODE
      COMMON / BLOC15 / R(307), REACT(307), BM(307), H, HE2,
     1                  MOP, N, NP4, MPLAST
C
C-----SET CONSTANT
      NSET=KS(NOP)
C-----START COMPUTING ES VALUES
      KO=2
      DO 190 J=4,NP4
      ZJ=J-4
      Z=ZJ*H-DPS(NOP)
C-----CHECK IF THE STATION IS ABOVE GROUND SURFACE  IF SO SET ES = 0
      IF (Z) 10,20,20
   10 ES(J)=0.0
      GO TO 190
C-----FIND THE P-Y CURVES LOCATING ABOVE AND BELOW THE GIVEN STATION
   20 IF (XS(NSET,KO)-Z) 30,50,60
   30 KO=KO+1
      IF (KO-NC(NSET)) 20,20,40
   40 WRITE (6,200)
      KEY=1
      RETURN
   50 M=KO
      GO TO 70
   60 M=KO-1
   70 YA=DABS(Y(J))
      IF (YA-EM14) 80,90,90
   80 YA=EM14
C-----FIND POINTS BEHIND AND AHEAD OF GIVEN Y ON EACH P-Y CURVE AND
C     COMPUTE ES ON EACH CURVE BY LINEAR INTERPOLATION
   90 DO 160 I=M,KO
      L=2
  100 IF (YC(NSET,I,L)-YA) 110,130,140
  110 L=L+1
      IF (L-NP(NSET,I)) 100,100,120
  120 P1=PC(NSET,I,L-1)
      GO TO 150
  130 P1=PC(NSET,I,L)
      GO TO 150
  140 P1=PC(NSET,I,L)-(PC(NSET,I,L)-PC(NSET,I,L-1))*(YC(NSET,I,L)-YA)/(Y
     1C(NSET,I,L)-YC(NSET,I,L-1))
  150 EST(I)=P1/YA
  160 CONTINUE
C-----INTERPOLATE BETWEEN CURVES FOR ES VALUE
      IF (KO-M) 170,170,180
  170 ES(J)=EST(KO)
      GO TO 190
  180 ES(J)=(EST(KO)-(EST(KO)-EST(M))*(XS(NSET,KO)-Z)/(XS(NSET,KO)-XS(NS
     1ET,M)))
  190 CONTINUE
      RETURN
C
  200 FORMAT (//52H     P-Y CURVES DO NOT EXTEND THE LENGTH OF THE PILE)
C
      END
      SUBROUTINE PYGEN(ID)
C
C
C     THIS ROUTINE READS IN THE INFORMATION NEEDED TO GENERATE P-Y
C     CURVES, STORES THE TOP AND BOTTOM NODE IN EACH LAYER AND CALLS
C     THE ROUTINE NEEDED FOR THE CALCULATIONS.
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      REAL*8 LENGTH
      CHARACTER*4 ISYSTM
      CHARACTER*8 UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11
      COMMON /BLOC01/ XN(20,307),DIAM,PI,EM14,EM6,EM5,LENGTH(20),NN
      COMMON /BLOC02/ XTOP(10),XBOT(10),XGS,NL,ITOP(10),IBOT(10)
      COMMON /BLOC09/ YINC,XSP(10),RCYCL,KTHRU,KCYCL,KPYOP,IT,IGP
      COMMON /BLOC14/ UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11,
     1 ISYSTM
C
C
C     ...ASSIGN A VALUE TO THE CODE, KTHRU, THAT WILL KEY THE
C        SUBROUTINES FOR OBTAINING SOIL MODULI TO GENERATE P-Y CURVES
C
      KTHRU=1
C
C     ...WRITE THE NUMBER OF DEPTHS AT WHICH P-Y CURVES ARE TO BE
C        GENERATED,THE DEPTHS OF THE CURVES AND THE PILE DIAMETER
C        FOR WHICH THE CURVES ARE TO BE GENERATED
C
      IF (KPYOP.EQ.-1) GO TO 10
      WRITE (6,110) IGP,NN
      GO TO 20
C
   10 WRITE (6,120) DIAM,UN1,NN
C
C     ...INITIALIZE THE LAYER NUMBER
   20 L=1
      IC=ID
C
C     ...SET NODE NUMBER OF BOTTOM NODE
      IBOT(NL)=NN
      DO 80 I=1,NN
      IF (I.GT.1) GO TO 50
C
C     ...STORE THE NUMBER OF THE TOP AND BOTTOM NODE IN EACH LAYER
C
   30 IF (XN(IC,1).LT.XBOT(L)) GO TO 40
      ITOP(L)=0
      L=L+1
      GO TO 30
   40 ITOP(L)=1
      GO TO 80
   50 IF (XN(IC,I).LE.XBOT(L)) GO TO 80
   60 L=L+1
      IF (XN(IC,I).LE.XBOT(L)) GO TO 70
      ITOP(L)=0
      IBOT(L-1)=I-1
      GO TO 60
   70 IBOT(L-1)=I-1
      ITOP(L)=I
   80 CONTINUE
C
C     ...SET NODE NUMBER IN LAYERS NOT ANALYZED TO ZERO AND SET NODE
C        NUMBER OF BOTTOM NODE IN LAST LAYER TO BE ANALYZED
   90 IF (L.GE.NL) GO TO 100
      IBOT(L)=NN
      ITOP(L+1)=0
      L=L+1
      GO TO 90
C
  100 CALL ESCALL (ID)
C
      RETURN
C
  110 FORMAT (//5X,39HGENERATED P-Y CURVES FOR PILE GROUP NO.,I5,//9X
     1,36HNUMBER OF CURVES                  = ,I2/9X,38HNUMBER OF POINTS
     2 ON EACH CURVE    = 17)
  120 FORMAT (//5X,41HGENERATED P-Y CURVES FOR PILE DIAMETER = ,A3,D1
     10.3,//9X,36HNUMBER OF CURVES                  = ,I2,/9X,38HNUMBER
     2OF POINTS ON EACH CURVE    = 17 )
C
      END
      SUBROUTINE ESCALL(MOP)
C
C
C     THIS ROUTINE CALLS THE APPROPRIATE SUBROUTINE FOR THE CALCULATION
C     OF SOIL MODULUS, DEPENDING ON THE SOIL TYPE.
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      REAL*8 LENGTH,K
      CHARACTER*8 TC
      COMMON / BLOC00 / TC(20)
      COMMON / BLOC04 / POTT(20),
     1                  DISTB(20),DISTA(20),THETA(20),DPS(20),
     2                  FDBET(20),KNPL,KP(20),KA(20),KS(20)
      COMMON / BLOC12 / KFLAG, KEY, KIG, KOI, KAX, KAR, KNODE
      COMMON /BLOC01/ XN(20,307),DIAM,PI,EM14,EM6,EM5,LENGTH(20),NN
      COMMON /BLOC02/ XTOP(10),XBOT(10),XGS,NL,ITOP(10),IBOT(10)
      COMMON /BLOC03/ ES(307),Y(307),LAYER(10),K(10)
      COMMON /BLOC05/ TOLP,KSOIL(10),ITOPL,IBOTL,MAXIT
      COMMON /BLOC09/ YINC,XSP(10),RCYCL,KTHRU,KCYCL,KPYOP,IT,IGP
C
C     ...ASSIGN ZERO SOIL MODULUS TO NODES ABOVE GROUND SURFACE
C
      IC=MOP
      IF (KPYOP.EQ.-1) GO TO 10
      IF (KPYOP.EQ.1) XGS=DPS(IGP)
      IF (KPYOP.EQ.0) XGS=DPS(IT)
   10 DO 20 I=1,NN
      IF (XN(IC,I).GE.XGS) GO TO 30
      ES(I)=0.
   20 CONTINUE
C
   30 DO 90 L=1,NL
C
      ITOPL=ITOP(L)
      IBOTL=IBOT(L)
C
C     ...FOR THE GENERATION OF P-Y CURVES, BYPASS A LAYER WHERE NO CURVE
C        IS DESIRED
C
      IF (ITOPL.EQ.0) GO TO 90
C
C     ...BRANCH ACCORDING TO SOIL TYPE
C
      KLOC=KSOIL(L)
      GO TO (40,50,60,70,80), KLOC
C
   40 CALL SOFTCL (IC)
      GO TO 90
C
   50 CALL STIFFB (IC,L)
      GO TO 90
C
   60 CALL STIFFA (IC)
      GO TO 90
C
   70 CALL SAND (IC,L)
      GO TO 90
C
   80 CALL CLAY (IC,L)
C
   90 CONTINUE
      RETURN
C
      END
      SUBROUTINE SOFTCL(ID)
C
C
C     THIS ROUTINE DOES THE FOLLOWING:
C          1)  COMPUTES VALUES OF SOIL MODULUS AT POINTS ON THE PILE
C              THAT ARE IN A LAYER SPECIFIED AS SOFT CLAY
C          2)  GENERATES P-Y CURVES AT SPECIFIED DEPTHS USING THE SOFT
C              CLAY CRITERIA (MATLOCK, 1970)
C
C
      IMPLICIT REAL*8 (A-H), REAL*8 (P-Z)
      REAL*8 LENGTH,K
      CHARACTER*8 TC
      CHARACTER*4 ISYSTM
      CHARACTER*8 UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11
      COMMON / BLOC00 / TC(20)
      COMMON / BLOC04 / POTT(20),
     1                  DISTB(20),DISTA(20),THETA(20),DPS(20),
     2                  FDBET(20),KNPL,KP(20),KA(20),KS(20)
      COMMON /BLOC01/ XN(20,307),DIAM,PI,EM14,EM6,EM5,LENGTH(20),NN
      COMMON /BLOC02/ XTOP(10),XBOT(10),XGS,NL,ITOP(10),IBOT(10)
      COMMON /BLOC03/ ES(307),Y(307),LAYER(10),K(10)
      COMMON /BLOC05/ TOLP,KSOIL(10),ITOPL,IBOTL,MAXIT
      COMMON /BLOC09/ YINC,XSP(10),RCYCL,KTHRU,KCYCL,KPYOP,IT,IGP
      COMMON /BLOC13/ AE(10),FR(10),FYR,KUNIF
      COMMON /BLOC14/ UN1,UN2,UN3,UN4,UN5,UN6,UN7,UN8,UN9,UN10,UN11,
     1 ISYSTM
C
      IC=ID
C
C     ...BEGIN THE CALCULATION LOOP FOR OBTAINING AN ES VALUE AT EACH
C        SPECIFIED DEPTH
C
      DO 190 I=ITOPL,IBOTL
C     ...ASSIGN THE NODE COORDINATE TO A LOCAL VARIABLE FOR CONVENIENCE
C
      X=XN(IC,I)
C     ...ASSIGN DEPTH OF POINT INTO SOIL
C
      IF (KPYOP.EQ.-1) GO TO 10
      IF (KPYOP.EQ.0) XGS=DPS(IT)
      IF (KPYOP.EQ.1) XGS=DPS(IGP)
   10 DEPTH=X-XGS
C     ...ASSIGN THE FUNCTION VALUES TO LOCAL VARIABLES
C
      IF (KPYOP.NE.-1) GO TO 20
      DX=DIAM
      GO TO 30
   20 DX=D(IC,X)
   30 CX=C(X)
      GAMX=GAM(X)
      E50X=E50(X)
      IF (KTHRU.EQ.0) GO TO 40
C
C     ...PRINT HEADING AND CALCULATION PARAMETERS FOR GENERATING P-Y
C        CURVE
      WRITE (6,200) UN3,UN3,UN4,UN5,UN3,UN7,UN8,UN4,UN5,UN3,UN7,UN9
      WRITE (6,210) DEPTH,DX,CX,GAMX,E50X
      WRITE (6,220) UN3,UN4,UN5,UN3
C
C     ...ASSIGN THE ABSOLUTE VALUE OF THE DEFLECTION TO A LOCAL VARIABLE
   40 YA=DABS(Y(I))
C
C     ...COMPUTE ULTIMATE SOIL MMSISTANCE VALUE
C
      CN1=0.
      IF (CX.GT.0.) CN1=3.+GAMX*DEPTH/CX+0.5*DEPTH/DX
      IF (CN1.GT.9.) GO TO 50
      PU=CN1*CX*DX
      GO TO 60
   50 PU=9.*CX*DX
C
C     ...COMPUTE VALUES OF THE CRITICAL DEFLECTION ON THE P-Y CURVE
C
   60 Y50=2.5*E50X*DX
C
      Y0=.008*Y50
      Y1=3.*Y50
      Y2=8.*Y50
      Y3=15.*Y50
      Y4=20.*Y50
      YINC=Y50/4.
C
C     ...COMPUTE ARBITRARY MAXIMUM SOIL MODULUS (MODULUS IS
C        INFINITE AT Y=0--COMPUTE ES AT Y=1.0E-14 AND MAKE
C        THIS THE MAXIMUM MODULUS).
      ESLIM=(PU/6.)*(EM14/Y50)**(-2./3.)
C
C     ...COMPUTE CRITICAL DEPTH
      XR=(6.*CX*DX)/(GAMX*DX+0.5*CX)
      IF (XR.LT.EM6) XR=DX
C
C     ...COMPUTE CRITICAL VALUES OF SOIL RESISTANCE ON P-Y CURVE
      P1=0.72*PU
      P3=P1*DEPTH/XR
C
C     ...BEGIN THE SOLUTION LOOP FOR POINTS ON P-Y CURVE AT A SPECIFIED
C        DEPTH
      DO 180 I1=1,17
C
C     ...BRANCH PAST THE ASSIGNING OF DEFLECTIONS FOR A COMPLETE P-Y
C        CURVE WHERE ONLY AN ES VALUE IS DESIRED
      IF (KTHRU.EQ.0) GO TO 90
C
C     ...ASSIGN Y VALUES FOR GENERATING COMPLETE P-Y CURVE
      IF (I1.GT.2) GO TO 70
      IF (I1.EQ.1) YA=0.
      IF (I1.EQ.2) YA=Y0
      IF (YA.GT.YINC) YA=YINC/2.
      GO TO 90
   70 IF (I1.GT.14) GO TO 80
      IF (I1.EQ.3) YA=0.
      YA=YA+YINC
      GO TO 90
   80 IF (I1.EQ.15) YA=Y2
      IF (I1.EQ.16) YA=Y3
      IF (I1.EQ.17) YA=Y4
C
C     ...COMPUTE THE VALUE OF SOIL RESISTANCE FOR A PARTICULAR VALUE
C        OF DEFLECTION
C
   90 IF (YA.LT.EM14) GO TO 160
C
      IF (YA.GT.Y1) GO TO 110
C
C     ...CURVED PORTION
  100 P=0.5*PU*((YA/Y50)**(1./3.))
      GO TO 150
C
C     ...BRANCH FOR CYCLIC OR STATIC LOADING
  110 IF (KCYCL.EQ.1) GO TO 140
C
C     ...BRANCH FOR DEPTHS ABOVE OR BELOW CRITICAL
      RE=XR-DEPTH
      IF (RE.LE.0.) GO TO 120
      IF (YA.GT.Y3) GO TO 130
C
C     ...DECREASING LINEAR PORTION FOR DEPTHS ABOVE CRITICAL
      S1=(P3-P1)/(Y3-Y1)
      P=P1+S1*(YA-Y1)
      GO TO 150
C
C     ...CONSTANT RESISTANCE AT MAXIMUM VALUE FOR POINTS BELOW CRITICAL
  120 P=P1
      GO TO 150
C
C     ...CONSTANT RESISTANCE FOR POINTS ABOVE CRITICAL DEPTH
  130 P=P3
      GO TO 150
  140 IF (YA.LE.Y2) GO TO 100
C
C     ...CONSTANT RESISTANCE AT ULTIMATE FOR STATIC LOADING
      P=PU
C
C     ...COMPUTE SOIL MODULUS VALUE
  150 ES(I)=P/YA
      GO TO 170
  160 ES(I)=ESLIM
      P=ESLIM*YA
C
C     ...BRANCH OUT OF THE SOLUTION LOOP FOR A COMPLETE P-Y CURVE WHERE
C        ONLY AN ES VALUE IS DESIRED
  170 IF (KTHRU.EQ.0) GO TO 190
C
C     ...PRINT P-Y CURVE DATA
C
      WRITE (6,230) YA,P
      IF (YA.LT.EM14.AND.I1.GE.2) WRITE (6,240) ESLIM
C
C     ...END OF SOLUTION LOOP FOR A COMPLETE P-Y CURVE
  180 CONTINUE
C
C     ...END OF SOLUTION LOOP FOR INCREMENTING TO A NEW DEPTH
  190 CONTINUE
      RETURN
C
  200 FORMAT (//9X,14HDEPTH BELOW GS,6X,4HDIAM,8X,1HC,8X,5HGAMMA,8X,3HE5
     10/15X,A2,13X,A2,5X,A3,A1,A2,A2,A1,2X,A3,A1,A2,A2,A1)
  210 FORMAT (8X,F10.2,6X,F10.3,1X,D10.2,1X,D10.2,1X,D12.4)
  220 FORMAT (/37X,2HY,,A2,13X,2HP,,A3,A1,A2)
  230 FORMAT (1X,20X,2F20.3)
  240 FORMAT (/29X,17H**** WARNING ****/5X,45HDEFLECTION IS LESS THAN 1.
     10D-14.  THE PROGRAM/5X,23HUSED A SOIL MODULUS OF ,D12.4)
C
      END

