// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "stdafx.h"
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "GenComp_Version_2.0.hxx"

// UnitMode
// 

UnitMode::
UnitMode (value v)
: ::xml_schema::string (_xsd_UnitMode_literals_[v])
{
}

UnitMode::
UnitMode (const wchar_t* v)
: ::xml_schema::string (v)
{
}

UnitMode::
UnitMode (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

UnitMode::
UnitMode (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

UnitMode::
UnitMode (const UnitMode& v,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

UnitMode& UnitMode::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_UnitMode_literals_[v]);

  return *this;
}


// ShapeType
// 

const ShapeType::Point_sequence& ShapeType::
Point () const
{
  return this->Point_;
}

ShapeType::Point_sequence& ShapeType::
Point ()
{
  return this->Point_;
}

void ShapeType::
Point (const Point_sequence& s)
{
  this->Point_ = s;
}

const ShapeType::version_type& ShapeType::
version () const
{
  return this->version_.get ();
}

ShapeType::version_type ShapeType::
version_default_value ()
{
  return version_type (2.0);
}


// PointType
// 

const PointType::X_type& PointType::
X () const
{
  return this->X_.get ();
}

PointType::X_type& PointType::
X ()
{
  return this->X_.get ();
}

void PointType::
X (const X_type& x)
{
  this->X_.set (x);
}

void PointType::
X (::std::auto_ptr< X_type > x)
{
  this->X_.set (x);
}

const PointType::Y_type& PointType::
Y () const
{
  return this->Y_.get ();
}

PointType::Y_type& PointType::
Y ()
{
  return this->Y_.get ();
}

void PointType::
Y (const Y_type& x)
{
  this->Y_.set (x);
}

void PointType::
Y (::std::auto_ptr< Y_type > x)
{
  this->Y_.set (x);
}

const PointType::version_type& PointType::
version () const
{
  return this->version_.get ();
}

PointType::version_type PointType::
version_default_value ()
{
  return version_type (1.0);
}


// GenComp
// 

const GenComp::UnitsDeclaration_optional& GenComp::
UnitsDeclaration () const
{
  return this->UnitsDeclaration_;
}

GenComp::UnitsDeclaration_optional& GenComp::
UnitsDeclaration ()
{
  return this->UnitsDeclaration_;
}

void GenComp::
UnitsDeclaration (const UnitsDeclaration_type& x)
{
  this->UnitsDeclaration_.set (x);
}

void GenComp::
UnitsDeclaration (const UnitsDeclaration_optional& x)
{
  this->UnitsDeclaration_ = x;
}

void GenComp::
UnitsDeclaration (::std::auto_ptr< UnitsDeclaration_type > x)
{
  this->UnitsDeclaration_.set (x);
}

const GenComp::Units_type& GenComp::
Units () const
{
  return this->Units_.get ();
}

GenComp::Units_type& GenComp::
Units ()
{
  return this->Units_.get ();
}

void GenComp::
Units (const Units_type& x)
{
  this->Units_.set (x);
}

void GenComp::
Units (::std::auto_ptr< Units_type > x)
{
  this->Units_.set (x);
}

const GenComp::ModularRatio_type& GenComp::
ModularRatio () const
{
  return this->ModularRatio_.get ();
}

GenComp::ModularRatio_type& GenComp::
ModularRatio ()
{
  return this->ModularRatio_.get ();
}

void GenComp::
ModularRatio (const ModularRatio_type& x)
{
  this->ModularRatio_.set (x);
}

const GenComp::PrimaryShape_type& GenComp::
PrimaryShape () const
{
  return this->PrimaryShape_.get ();
}

GenComp::PrimaryShape_type& GenComp::
PrimaryShape ()
{
  return this->PrimaryShape_.get ();
}

void GenComp::
PrimaryShape (const PrimaryShape_type& x)
{
  this->PrimaryShape_.set (x);
}

void GenComp::
PrimaryShape (::std::auto_ptr< PrimaryShape_type > x)
{
  this->PrimaryShape_.set (x);
}

const GenComp::SecondaryShape_type& GenComp::
SecondaryShape () const
{
  return this->SecondaryShape_.get ();
}

GenComp::SecondaryShape_type& GenComp::
SecondaryShape ()
{
  return this->SecondaryShape_.get ();
}

void GenComp::
SecondaryShape (const SecondaryShape_type& x)
{
  this->SecondaryShape_.set (x);
}

void GenComp::
SecondaryShape (::std::auto_ptr< SecondaryShape_type > x)
{
  this->SecondaryShape_.set (x);
}

const GenComp::version_type& GenComp::
version () const
{
  return this->version_.get ();
}

GenComp::version_type GenComp::
version_default_value ()
{
  return version_type (2.0);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// UnitMode
//

UnitMode::
UnitMode (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_UnitMode_convert ();
}

UnitMode::
UnitMode (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_UnitMode_convert ();
}

UnitMode::
UnitMode (const ::std::wstring& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_UnitMode_convert ();
}

UnitMode* UnitMode::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class UnitMode (*this, f, c);
}

UnitMode::value UnitMode::
_xsd_UnitMode_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_UnitMode_literals_);
  const value* i (::std::lower_bound (
                    _xsd_UnitMode_indexes_,
                    _xsd_UnitMode_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_UnitMode_indexes_ + 2 || _xsd_UnitMode_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const UnitMode::
_xsd_UnitMode_literals_[2] =
{
  L"SI",
  L"US"
};

const UnitMode::value UnitMode::
_xsd_UnitMode_indexes_[2] =
{
  ::UnitMode::SI,
  ::UnitMode::US
};

// ShapeType
//

ShapeType::
ShapeType ()
: ::xml_schema::type (),
  Point_ (::xml_schema::flags (), this),
  version_ (version_default_value (), ::xml_schema::flags (), this)
{
}

ShapeType::
ShapeType (const ShapeType& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Point_ (x.Point_, f, this),
  version_ (x.version_, f, this)
{
}

ShapeType::
ShapeType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Point_ (f, this),
  version_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
    this->parse (p, f);
  }
}

void ShapeType::
parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (i));

    // Point
    //
    if (n.name () == L"Point" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Point_type > r (
        Point_traits::create (i, f, this));

      this->Point_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (i));

    if (n.name () == L"version" && n.namespace_ ().empty ())
    {
      this->version_.set (version_traits::create (i, f, this));
      continue;
    }
  }

  if (!version_.present ())
  {
    this->version_.set (version_default_value ());
  }
}

ShapeType* ShapeType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ShapeType (*this, f, c);
}

ShapeType::
~ShapeType ()
{
}

// PointType
//

PointType::
PointType (const X_type& X,
           const Y_type& Y)
: ::xml_schema::type (),
  X_ (X, ::xml_schema::flags (), this),
  Y_ (Y, ::xml_schema::flags (), this),
  version_ (version_default_value (), ::xml_schema::flags (), this)
{
}

PointType::
PointType (::std::auto_ptr< X_type >& X,
           ::std::auto_ptr< Y_type >& Y)
: ::xml_schema::type (),
  X_ (X, ::xml_schema::flags (), this),
  Y_ (Y, ::xml_schema::flags (), this),
  version_ (version_default_value (), ::xml_schema::flags (), this)
{
}

PointType::
PointType (const PointType& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  X_ (x.X_, f, this),
  Y_ (x.Y_, f, this),
  version_ (x.version_, f, this)
{
}

PointType::
PointType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  X_ (f, this),
  Y_ (f, this),
  version_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
    this->parse (p, f);
  }
}

void PointType::
parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (i));

    // X
    //
    if (n.name () == L"X" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< X_type > r (
        X_traits::create (i, f, this));

      if (!X_.present ())
      {
        this->X_.set (r);
        continue;
      }
    }

    // Y
    //
    if (n.name () == L"Y" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Y_type > r (
        Y_traits::create (i, f, this));

      if (!Y_.present ())
      {
        this->Y_.set (r);
        continue;
      }
    }

    break;
  }

  if (!X_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< wchar_t > (
      L"X",
      L"");
  }

  if (!Y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< wchar_t > (
      L"Y",
      L"");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (i));

    if (n.name () == L"version" && n.namespace_ ().empty ())
    {
      this->version_.set (version_traits::create (i, f, this));
      continue;
    }
  }

  if (!version_.present ())
  {
    this->version_.set (version_default_value ());
  }
}

PointType* PointType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PointType (*this, f, c);
}

PointType::
~PointType ()
{
}

// GenComp
//

GenComp::
GenComp (const Units_type& Units,
         const ModularRatio_type& ModularRatio,
         const PrimaryShape_type& PrimaryShape,
         const SecondaryShape_type& SecondaryShape)
: ::xml_schema::type (),
  UnitsDeclaration_ (::xml_schema::flags (), this),
  Units_ (Units, ::xml_schema::flags (), this),
  ModularRatio_ (ModularRatio, ::xml_schema::flags (), this),
  PrimaryShape_ (PrimaryShape, ::xml_schema::flags (), this),
  SecondaryShape_ (SecondaryShape, ::xml_schema::flags (), this),
  version_ (version_default_value (), ::xml_schema::flags (), this)
{
}

GenComp::
GenComp (const Units_type& Units,
         const ModularRatio_type& ModularRatio,
         ::std::auto_ptr< PrimaryShape_type >& PrimaryShape,
         ::std::auto_ptr< SecondaryShape_type >& SecondaryShape)
: ::xml_schema::type (),
  UnitsDeclaration_ (::xml_schema::flags (), this),
  Units_ (Units, ::xml_schema::flags (), this),
  ModularRatio_ (ModularRatio, ::xml_schema::flags (), this),
  PrimaryShape_ (PrimaryShape, ::xml_schema::flags (), this),
  SecondaryShape_ (SecondaryShape, ::xml_schema::flags (), this),
  version_ (version_default_value (), ::xml_schema::flags (), this)
{
}

GenComp::
GenComp (const GenComp& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  UnitsDeclaration_ (x.UnitsDeclaration_, f, this),
  Units_ (x.Units_, f, this),
  ModularRatio_ (x.ModularRatio_, f, this),
  PrimaryShape_ (x.PrimaryShape_, f, this),
  SecondaryShape_ (x.SecondaryShape_, f, this),
  version_ (x.version_, f, this)
{
}

GenComp::
GenComp (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  UnitsDeclaration_ (f, this),
  Units_ (f, this),
  ModularRatio_ (f, this),
  PrimaryShape_ (f, this),
  SecondaryShape_ (f, this),
  version_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
    this->parse (p, f);
  }
}

void GenComp::
parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (i));

    // UnitsDeclaration
    //
    if (n.name () == L"UnitsDeclaration" && n.namespace_ () == L"http://www.wsdot.wa.gov/OpenBridgeML/Units")
    {
      ::std::auto_ptr< UnitsDeclaration_type > r (
        UnitsDeclaration_traits::create (i, f, this));

      if (!this->UnitsDeclaration_)
      {
        this->UnitsDeclaration_.set (r);
        continue;
      }
    }

    // Units
    //
    if (n.name () == L"Units" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Units_type > r (
        Units_traits::create (i, f, this));

      if (!Units_.present ())
      {
        this->Units_.set (r);
        continue;
      }
    }

    // ModularRatio
    //
    if (n.name () == L"ModularRatio" && n.namespace_ ().empty ())
    {
      if (!ModularRatio_.present ())
      {
        this->ModularRatio_.set (ModularRatio_traits::create (i, f, this));
        continue;
      }
    }

    // PrimaryShape
    //
    if (n.name () == L"PrimaryShape" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PrimaryShape_type > r (
        PrimaryShape_traits::create (i, f, this));

      if (!PrimaryShape_.present ())
      {
        this->PrimaryShape_.set (r);
        continue;
      }
    }

    // SecondaryShape
    //
    if (n.name () == L"SecondaryShape" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< SecondaryShape_type > r (
        SecondaryShape_traits::create (i, f, this));

      if (!SecondaryShape_.present ())
      {
        this->SecondaryShape_.set (r);
        continue;
      }
    }

    break;
  }

  if (!Units_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< wchar_t > (
      L"Units",
      L"");
  }

  if (!ModularRatio_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< wchar_t > (
      L"ModularRatio",
      L"");
  }

  if (!PrimaryShape_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< wchar_t > (
      L"PrimaryShape",
      L"");
  }

  if (!SecondaryShape_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< wchar_t > (
      L"SecondaryShape",
      L"");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (i));

    if (n.name () == L"version" && n.namespace_ ().empty ())
    {
      this->version_.set (version_traits::create (i, f, this));
      continue;
    }
  }

  if (!version_.present ())
  {
    this->version_.set (version_default_value ());
  }
}

GenComp* GenComp::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GenComp (*this, f, c);
}

GenComp::
~GenComp ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::GenComp >
GenComp_ (const ::std::wstring& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< wchar_t > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

  ::std::auto_ptr< ::GenComp > r (
    ::GenComp_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GenComp >
GenComp_ (const ::std::wstring& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< wchar_t > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< wchar_t > ();

  ::std::auto_ptr< ::GenComp > r (
    ::GenComp_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GenComp >
GenComp_ (const ::std::wstring& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< wchar_t > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< wchar_t > ();

  ::std::auto_ptr< ::GenComp > r (
    ::GenComp_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::GenComp_ (isrc, f, p);
}

::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::GenComp_ (isrc, h, f, p);
}

::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::GenComp_ (isrc, h, f, p);
}

::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          const ::std::wstring& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::GenComp_ (isrc, f, p);
}

::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          const ::std::wstring& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::GenComp_ (isrc, h, f, p);
}

::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          const ::std::wstring& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::GenComp_ (isrc, h, f, p);
}

::std::auto_ptr< ::GenComp >
GenComp_ (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< wchar_t > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

  ::std::auto_ptr< ::GenComp > r (
    ::GenComp_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GenComp >
GenComp_ (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< wchar_t > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< wchar_t > ();

  ::std::auto_ptr< ::GenComp > r (
    ::GenComp_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GenComp >
GenComp_ (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< wchar_t > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< wchar_t > ();

  ::std::auto_ptr< ::GenComp > r (
    ::GenComp_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GenComp >
GenComp_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::GenComp > r (
      ::GenComp_ (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"GenComp" &&
      n.namespace_ () == L"")
  {
    ::std::auto_ptr< ::GenComp > r (
      ::xsd::cxx::tree::traits< ::GenComp, wchar_t >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
    n.name (),
    n.namespace_ (),
    L"GenComp",
    L"");
}

::std::auto_ptr< ::GenComp >
GenComp_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == L"GenComp" &&
      n.namespace_ () == L"")
  {
    ::std::auto_ptr< ::GenComp > r (
      ::xsd::cxx::tree::traits< ::GenComp, wchar_t >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
    n.name (),
    n.namespace_ (),
    L"GenComp",
    L"");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
GenComp_ (::std::ostream& o,
          const ::GenComp& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GenComp_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
GenComp_ (::std::ostream& o,
          const ::GenComp& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GenComp_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
GenComp_ (::std::ostream& o,
          const ::GenComp& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GenComp_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
GenComp_ (::xercesc::XMLFormatTarget& t,
          const ::GenComp& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GenComp_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
GenComp_ (::xercesc::XMLFormatTarget& t,
          const ::GenComp& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GenComp_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
GenComp_ (::xercesc::XMLFormatTarget& t,
          const ::GenComp& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GenComp_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
GenComp_ (::xercesc::DOMDocument& d,
          const ::GenComp& s,
          ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"GenComp" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"GenComp",
      L"");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
GenComp_ (const ::GenComp& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"GenComp",
      L"",
      m, f));

  ::GenComp_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const UnitMode& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const UnitMode& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const UnitMode& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const ShapeType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // Point
  //
  for (ShapeType::Point_const_iterator
       b (i.Point ().begin ()), n (i.Point ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"Point",
        e));

    s << *b;
  }

  // version
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"version",
        e));

    a << ::xml_schema::as_decimal(i.version ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const PointType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // X
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"X",
        e));

    s << i.X ();
  }

  // Y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"Y",
        e));

    s << i.Y ();
  }

  // version
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"version",
        e));

    a << ::xml_schema::as_decimal(i.version ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const GenComp& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // UnitsDeclaration
  //
  if (i.UnitsDeclaration ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"UnitsDeclaration",
        L"http://www.wsdot.wa.gov/OpenBridgeML/Units",
        e));

    s << *i.UnitsDeclaration ();
  }

  // Units
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"Units",
        e));

    s << i.Units ();
  }

  // ModularRatio
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"ModularRatio",
        e));

    s << ::xml_schema::as_double(i.ModularRatio ());
  }

  // PrimaryShape
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"PrimaryShape",
        e));

    s << i.PrimaryShape ();
  }

  // SecondaryShape
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"SecondaryShape",
        e));

    s << i.SecondaryShape ();
  }

  // version
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"version",
        e));

    a << ::xml_schema::as_decimal(i.version ());
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

