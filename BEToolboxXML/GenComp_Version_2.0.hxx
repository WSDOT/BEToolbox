// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GEN_COMP_VERSION_2_0_HXX
#define GEN_COMP_VERSION_2_0_HXX

// Begin prologue.
//
#include "BEToolboxXML.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< wchar_t, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< wchar_t, string > normalized_string;
  typedef ::xsd::cxx::tree::token< wchar_t, normalized_string > token;
  typedef ::xsd::cxx::tree::name< wchar_t, token > name;
  typedef ::xsd::cxx::tree::nmtoken< wchar_t, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< wchar_t, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< wchar_t, name > ncname;
  typedef ::xsd::cxx::tree::language< wchar_t, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< wchar_t, ncname > id;
  typedef ::xsd::cxx::tree::idref< wchar_t, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< wchar_t, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< wchar_t, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< wchar_t, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< wchar_t > buffer;
  typedef ::xsd::cxx::tree::base64_binary< wchar_t, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< wchar_t, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< wchar_t, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< wchar_t, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< wchar_t, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< wchar_t, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< wchar_t, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< wchar_t, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< wchar_t, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< wchar_t, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< wchar_t, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< wchar_t, ncname > entity;
  typedef ::xsd::cxx::tree::entities< wchar_t, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< wchar_t > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< wchar_t > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< wchar_t > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< wchar_t > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< wchar_t > error;
  typedef ::xsd::cxx::tree::diagnostics< wchar_t > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< wchar_t > exception;
  typedef ::xsd::cxx::tree::bounds< wchar_t > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< wchar_t > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< wchar_t > parsing;
  typedef ::xsd::cxx::tree::expected_element< wchar_t > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< wchar_t > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< wchar_t > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< wchar_t > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< wchar_t > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< wchar_t > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< wchar_t > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< wchar_t > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class UnitMode;
class ShapeType;
class PointType;
class GenComp;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../../OpenBridgeML/Schema/OpenBridgeML_Units.hxx"

class BETOOLBOXXMLCLASS UnitMode: public ::xml_schema::string
{
  public:
  enum value
  {
    SI,
    US
  };

  UnitMode (value v);

  UnitMode (const wchar_t* v);

  UnitMode (const ::std::wstring& v);

  UnitMode (const ::xml_schema::string& v);

  UnitMode (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  UnitMode (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  UnitMode (const ::std::wstring& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  UnitMode (const UnitMode& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual UnitMode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  UnitMode&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_UnitMode_convert ();
  }

  protected:
  value
  _xsd_UnitMode_convert () const;

  public:
  static const wchar_t* const _xsd_UnitMode_literals_[2];
  static const value _xsd_UnitMode_indexes_[2];
};

class BETOOLBOXXMLCLASS ShapeType: public ::xml_schema::type
{
  public:
  // Point
  // 
  typedef ::PointType Point_type;
  typedef ::xsd::cxx::tree::sequence< Point_type > Point_sequence;
  typedef Point_sequence::iterator Point_iterator;
  typedef Point_sequence::const_iterator Point_const_iterator;
  typedef ::xsd::cxx::tree::traits< Point_type, wchar_t > Point_traits;

  const Point_sequence&
  Point () const;

  Point_sequence&
  Point ();

  void
  Point (const Point_sequence& s);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  ShapeType ();

  ShapeType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ShapeType (const ShapeType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual ShapeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ShapeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  Point_sequence Point_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS PointType: public ::xml_schema::type
{
  public:
  // X
  // 
  typedef ::OpenBridgeML::Units::LengthValueType X_type;
  typedef ::xsd::cxx::tree::traits< X_type, wchar_t > X_traits;

  const X_type&
  X () const;

  X_type&
  X ();

  void
  X (const X_type& x);

  void
  X (::std::auto_ptr< X_type > p);

  // Y
  // 
  typedef ::OpenBridgeML::Units::LengthValueType Y_type;
  typedef ::xsd::cxx::tree::traits< Y_type, wchar_t > Y_traits;

  const Y_type&
  Y () const;

  Y_type&
  Y ();

  void
  Y (const Y_type& x);

  void
  Y (::std::auto_ptr< Y_type > p);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  PointType (const X_type&,
             const Y_type&);

  PointType (::std::auto_ptr< X_type >&,
             ::std::auto_ptr< Y_type >&);

  PointType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  PointType (const PointType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual PointType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PointType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< X_type > X_;
  ::xsd::cxx::tree::one< Y_type > Y_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS GenComp: public ::xml_schema::type
{
  public:
  // UnitsDeclaration
  // 
  typedef ::OpenBridgeML::Units::UnitsDeclarationType UnitsDeclaration_type;
  typedef ::xsd::cxx::tree::optional< UnitsDeclaration_type > UnitsDeclaration_optional;
  typedef ::xsd::cxx::tree::traits< UnitsDeclaration_type, wchar_t > UnitsDeclaration_traits;

  const UnitsDeclaration_optional&
  UnitsDeclaration () const;

  UnitsDeclaration_optional&
  UnitsDeclaration ();

  void
  UnitsDeclaration (const UnitsDeclaration_type& x);

  void
  UnitsDeclaration (const UnitsDeclaration_optional& x);

  void
  UnitsDeclaration (::std::auto_ptr< UnitsDeclaration_type > p);

  // Units
  // 
  typedef ::UnitMode Units_type;
  typedef ::xsd::cxx::tree::traits< Units_type, wchar_t > Units_traits;

  const Units_type&
  Units () const;

  Units_type&
  Units ();

  void
  Units (const Units_type& x);

  void
  Units (::std::auto_ptr< Units_type > p);

  // ModularRatio
  // 
  typedef ::xml_schema::double_ ModularRatio_type;
  typedef ::xsd::cxx::tree::traits< ModularRatio_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > ModularRatio_traits;

  const ModularRatio_type&
  ModularRatio () const;

  ModularRatio_type&
  ModularRatio ();

  void
  ModularRatio (const ModularRatio_type& x);

  // PrimaryShape
  // 
  typedef ::ShapeType PrimaryShape_type;
  typedef ::xsd::cxx::tree::traits< PrimaryShape_type, wchar_t > PrimaryShape_traits;

  const PrimaryShape_type&
  PrimaryShape () const;

  PrimaryShape_type&
  PrimaryShape ();

  void
  PrimaryShape (const PrimaryShape_type& x);

  void
  PrimaryShape (::std::auto_ptr< PrimaryShape_type > p);

  // SecondaryShape
  // 
  typedef ::ShapeType SecondaryShape_type;
  typedef ::xsd::cxx::tree::traits< SecondaryShape_type, wchar_t > SecondaryShape_traits;

  const SecondaryShape_type&
  SecondaryShape () const;

  SecondaryShape_type&
  SecondaryShape ();

  void
  SecondaryShape (const SecondaryShape_type& x);

  void
  SecondaryShape (::std::auto_ptr< SecondaryShape_type > p);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  GenComp (const Units_type&,
           const ModularRatio_type&,
           const PrimaryShape_type&,
           const SecondaryShape_type&);

  GenComp (const Units_type&,
           const ModularRatio_type&,
           ::std::auto_ptr< PrimaryShape_type >&,
           ::std::auto_ptr< SecondaryShape_type >&);

  GenComp (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  GenComp (const GenComp& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual GenComp*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GenComp ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  UnitsDeclaration_optional UnitsDeclaration_;
  ::xsd::cxx::tree::one< Units_type > Units_;
  ::xsd::cxx::tree::one< ModularRatio_type > ModularRatio_;
  ::xsd::cxx::tree::one< PrimaryShape_type > PrimaryShape_;
  ::xsd::cxx::tree::one< SecondaryShape_type > SecondaryShape_;
  ::xsd::cxx::tree::one< version_type > version_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (const ::std::wstring& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (const ::std::wstring& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (const ::std::wstring& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          const ::std::wstring& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          const ::std::wstring& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::std::istream& is,
          const ::std::wstring& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::GenComp >
GenComp_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

BETOOLBOXXMLCLASS
void
GenComp_ (::std::ostream& os,
          const ::GenComp& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
GenComp_ (::std::ostream& os,
          const ::GenComp& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
GenComp_ (::std::ostream& os,
          const ::GenComp& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

BETOOLBOXXMLCLASS
void
GenComp_ (::xercesc::XMLFormatTarget& ft,
          const ::GenComp& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
GenComp_ (::xercesc::XMLFormatTarget& ft,
          const ::GenComp& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
GenComp_ (::xercesc::XMLFormatTarget& ft,
          const ::GenComp& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

BETOOLBOXXMLCLASS
void
GenComp_ (::xercesc::DOMDocument& d,
          const ::GenComp& x,
          ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

BETOOLBOXXMLCLASS
::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
GenComp_ (const ::GenComp& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const UnitMode&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMAttr&, const UnitMode&);

BETOOLBOXXMLCLASS
void
operator<< (::xml_schema::list_stream&,
            const UnitMode&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const ShapeType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const PointType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const GenComp&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GEN_COMP_VERSION_2_0_HXX
