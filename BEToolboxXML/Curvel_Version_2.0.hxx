// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CURVEL_VERSION_2_0_HXX
#define CURVEL_VERSION_2_0_HXX

// Begin prologue.
//
#include "BEToolboxXML.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< wchar_t, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< wchar_t, string > normalized_string;
  typedef ::xsd::cxx::tree::token< wchar_t, normalized_string > token;
  typedef ::xsd::cxx::tree::name< wchar_t, token > name;
  typedef ::xsd::cxx::tree::nmtoken< wchar_t, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< wchar_t, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< wchar_t, name > ncname;
  typedef ::xsd::cxx::tree::language< wchar_t, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< wchar_t, ncname > id;
  typedef ::xsd::cxx::tree::idref< wchar_t, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< wchar_t, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< wchar_t, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< wchar_t, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< wchar_t > buffer;
  typedef ::xsd::cxx::tree::base64_binary< wchar_t, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< wchar_t, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< wchar_t, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< wchar_t, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< wchar_t, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< wchar_t, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< wchar_t, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< wchar_t, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< wchar_t, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< wchar_t, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< wchar_t, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< wchar_t, ncname > entity;
  typedef ::xsd::cxx::tree::entities< wchar_t, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< wchar_t > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< wchar_t > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< wchar_t > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< wchar_t > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< wchar_t > error;
  typedef ::xsd::cxx::tree::diagnostics< wchar_t > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< wchar_t > exception;
  typedef ::xsd::cxx::tree::bounds< wchar_t > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< wchar_t > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< wchar_t > parsing;
  typedef ::xsd::cxx::tree::expected_element< wchar_t > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< wchar_t > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< wchar_t > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< wchar_t > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< wchar_t > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< wchar_t > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< wchar_t > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< wchar_t > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class VerticalCurveDataType;
class SuperelevationDataType;
class CrownSlopeType;
class SuperelevationProfilePointType;
class IndividualStationsType;
class IndividualStationType;
class StationRangesType;
class StationRangeType;
class SkewLinesType;
class OffsetType;
class SkewAngleType;
class SkewLineType;
class Curvel;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../../OpenBridgeML/Schema/OpenBridgeML_Units.hxx"

class BETOOLBOXXMLCLASS VerticalCurveDataType: public ::xml_schema::type
{
  public:
  // g1
  // 
  typedef ::xml_schema::double_ g1_type;
  typedef ::xsd::cxx::tree::traits< g1_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > g1_traits;

  const g1_type&
  g1 () const;

  g1_type&
  g1 ();

  void
  g1 (const g1_type& x);

  // g2
  // 
  typedef ::xml_schema::double_ g2_type;
  typedef ::xsd::cxx::tree::traits< g2_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > g2_traits;

  const g2_type&
  g2 () const;

  g2_type&
  g2 ();

  void
  g2 (const g2_type& x);

  // PVIStation
  // 
  typedef ::OpenBridgeML::Units::LengthValueType PVIStation_type;
  typedef ::xsd::cxx::tree::traits< PVIStation_type, wchar_t > PVIStation_traits;

  const PVIStation_type&
  PVIStation () const;

  PVIStation_type&
  PVIStation ();

  void
  PVIStation (const PVIStation_type& x);

  void
  PVIStation (::std::auto_ptr< PVIStation_type > p);

  // PVIElevation
  // 
  typedef ::OpenBridgeML::Units::LengthValueType PVIElevation_type;
  typedef ::xsd::cxx::tree::traits< PVIElevation_type, wchar_t > PVIElevation_traits;

  const PVIElevation_type&
  PVIElevation () const;

  PVIElevation_type&
  PVIElevation ();

  void
  PVIElevation (const PVIElevation_type& x);

  void
  PVIElevation (::std::auto_ptr< PVIElevation_type > p);

  // Length
  // 
  typedef ::OpenBridgeML::Units::PositiveLengthValueType Length_type;
  typedef ::xsd::cxx::tree::traits< Length_type, wchar_t > Length_traits;

  const Length_type&
  Length () const;

  Length_type&
  Length ();

  void
  Length (const Length_type& x);

  void
  Length (::std::auto_ptr< Length_type > p);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  VerticalCurveDataType (const g1_type&,
                         const g2_type&,
                         const PVIStation_type&,
                         const PVIElevation_type&,
                         const Length_type&);

  VerticalCurveDataType (const g1_type&,
                         const g2_type&,
                         ::std::auto_ptr< PVIStation_type >&,
                         ::std::auto_ptr< PVIElevation_type >&,
                         ::std::auto_ptr< Length_type >&);

  VerticalCurveDataType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  VerticalCurveDataType (const VerticalCurveDataType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual VerticalCurveDataType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~VerticalCurveDataType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< g1_type > g1_;
  ::xsd::cxx::tree::one< g2_type > g2_;
  ::xsd::cxx::tree::one< PVIStation_type > PVIStation_;
  ::xsd::cxx::tree::one< PVIElevation_type > PVIElevation_;
  ::xsd::cxx::tree::one< Length_type > Length_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS SuperelevationDataType: public ::xml_schema::type
{
  public:
  // ProfileGradeOffset
  // 
  typedef ::OpenBridgeML::Units::LengthValueType ProfileGradeOffset_type;
  typedef ::xsd::cxx::tree::traits< ProfileGradeOffset_type, wchar_t > ProfileGradeOffset_traits;

  const ProfileGradeOffset_type&
  ProfileGradeOffset () const;

  ProfileGradeOffset_type&
  ProfileGradeOffset ();

  void
  ProfileGradeOffset (const ProfileGradeOffset_type& x);

  void
  ProfileGradeOffset (::std::auto_ptr< ProfileGradeOffset_type > p);

  // CrownSlope
  // 
  typedef ::CrownSlopeType CrownSlope_type;
  typedef ::xsd::cxx::tree::traits< CrownSlope_type, wchar_t > CrownSlope_traits;

  const CrownSlope_type&
  CrownSlope () const;

  CrownSlope_type&
  CrownSlope ();

  void
  CrownSlope (const CrownSlope_type& x);

  void
  CrownSlope (::std::auto_ptr< CrownSlope_type > p);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  SuperelevationDataType (const ProfileGradeOffset_type&,
                          const CrownSlope_type&);

  SuperelevationDataType (::std::auto_ptr< ProfileGradeOffset_type >&,
                          ::std::auto_ptr< CrownSlope_type >&);

  SuperelevationDataType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  SuperelevationDataType (const SuperelevationDataType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual SuperelevationDataType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SuperelevationDataType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ProfileGradeOffset_type > ProfileGradeOffset_;
  ::xsd::cxx::tree::one< CrownSlope_type > CrownSlope_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS CrownSlopeType: public ::xml_schema::type
{
  public:
  // SuperelevationProfilePoint
  // 
  typedef ::SuperelevationProfilePointType SuperelevationProfilePoint_type;
  typedef ::xsd::cxx::tree::sequence< SuperelevationProfilePoint_type > SuperelevationProfilePoint_sequence;
  typedef SuperelevationProfilePoint_sequence::iterator SuperelevationProfilePoint_iterator;
  typedef SuperelevationProfilePoint_sequence::const_iterator SuperelevationProfilePoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< SuperelevationProfilePoint_type, wchar_t > SuperelevationProfilePoint_traits;

  const SuperelevationProfilePoint_sequence&
  SuperelevationProfilePoint () const;

  SuperelevationProfilePoint_sequence&
  SuperelevationProfilePoint ();

  void
  SuperelevationProfilePoint (const SuperelevationProfilePoint_sequence& s);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  CrownSlopeType ();

  CrownSlopeType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  CrownSlopeType (const CrownSlopeType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual CrownSlopeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CrownSlopeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  SuperelevationProfilePoint_sequence SuperelevationProfilePoint_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS SuperelevationProfilePointType: public ::xml_schema::type
{
  public:
  // Station
  // 
  typedef ::OpenBridgeML::Units::LengthValueType Station_type;
  typedef ::xsd::cxx::tree::traits< Station_type, wchar_t > Station_traits;

  const Station_type&
  Station () const;

  Station_type&
  Station ();

  void
  Station (const Station_type& x);

  void
  Station (::std::auto_ptr< Station_type > p);

  // LeftSlope
  // 
  typedef ::xml_schema::double_ LeftSlope_type;
  typedef ::xsd::cxx::tree::traits< LeftSlope_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > LeftSlope_traits;

  const LeftSlope_type&
  LeftSlope () const;

  LeftSlope_type&
  LeftSlope ();

  void
  LeftSlope (const LeftSlope_type& x);

  // RightSlope
  // 
  typedef ::xml_schema::double_ RightSlope_type;
  typedef ::xsd::cxx::tree::traits< RightSlope_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > RightSlope_traits;

  const RightSlope_type&
  RightSlope () const;

  RightSlope_type&
  RightSlope ();

  void
  RightSlope (const RightSlope_type& x);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  SuperelevationProfilePointType (const Station_type&,
                                  const LeftSlope_type&,
                                  const RightSlope_type&);

  SuperelevationProfilePointType (::std::auto_ptr< Station_type >&,
                                  const LeftSlope_type&,
                                  const RightSlope_type&);

  SuperelevationProfilePointType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  SuperelevationProfilePointType (const SuperelevationProfilePointType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual SuperelevationProfilePointType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SuperelevationProfilePointType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Station_type > Station_;
  ::xsd::cxx::tree::one< LeftSlope_type > LeftSlope_;
  ::xsd::cxx::tree::one< RightSlope_type > RightSlope_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS IndividualStationsType: public ::xml_schema::type
{
  public:
  // IndividualStation
  // 
  typedef ::IndividualStationType IndividualStation_type;
  typedef ::xsd::cxx::tree::sequence< IndividualStation_type > IndividualStation_sequence;
  typedef IndividualStation_sequence::iterator IndividualStation_iterator;
  typedef IndividualStation_sequence::const_iterator IndividualStation_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndividualStation_type, wchar_t > IndividualStation_traits;

  const IndividualStation_sequence&
  IndividualStation () const;

  IndividualStation_sequence&
  IndividualStation ();

  void
  IndividualStation (const IndividualStation_sequence& s);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  IndividualStationsType ();

  IndividualStationsType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  IndividualStationsType (const IndividualStationsType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual IndividualStationsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IndividualStationsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  IndividualStation_sequence IndividualStation_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS IndividualStationType: public ::xml_schema::type
{
  public:
  // Station
  // 
  typedef ::OpenBridgeML::Units::LengthValueType Station_type;
  typedef ::xsd::cxx::tree::traits< Station_type, wchar_t > Station_traits;

  const Station_type&
  Station () const;

  Station_type&
  Station ();

  void
  Station (const Station_type& x);

  void
  Station (::std::auto_ptr< Station_type > p);

  // Offset
  // 
  typedef ::OpenBridgeML::Units::LengthValueType Offset_type;
  typedef ::xsd::cxx::tree::traits< Offset_type, wchar_t > Offset_traits;

  const Offset_type&
  Offset () const;

  Offset_type&
  Offset ();

  void
  Offset (const Offset_type& x);

  void
  Offset (::std::auto_ptr< Offset_type > p);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  IndividualStationType (const Station_type&,
                         const Offset_type&);

  IndividualStationType (::std::auto_ptr< Station_type >&,
                         ::std::auto_ptr< Offset_type >&);

  IndividualStationType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  IndividualStationType (const IndividualStationType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual IndividualStationType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IndividualStationType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Station_type > Station_;
  ::xsd::cxx::tree::one< Offset_type > Offset_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS StationRangesType: public ::xml_schema::type
{
  public:
  // StationRange
  // 
  typedef ::StationRangeType StationRange_type;
  typedef ::xsd::cxx::tree::sequence< StationRange_type > StationRange_sequence;
  typedef StationRange_sequence::iterator StationRange_iterator;
  typedef StationRange_sequence::const_iterator StationRange_const_iterator;
  typedef ::xsd::cxx::tree::traits< StationRange_type, wchar_t > StationRange_traits;

  const StationRange_sequence&
  StationRange () const;

  StationRange_sequence&
  StationRange ();

  void
  StationRange (const StationRange_sequence& s);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  StationRangesType ();

  StationRangesType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  StationRangesType (const StationRangesType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual StationRangesType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~StationRangesType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  StationRange_sequence StationRange_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS StationRangeType: public ::xml_schema::type
{
  public:
  // StartStation
  // 
  typedef ::OpenBridgeML::Units::LengthValueType StartStation_type;
  typedef ::xsd::cxx::tree::traits< StartStation_type, wchar_t > StartStation_traits;

  const StartStation_type&
  StartStation () const;

  StartStation_type&
  StartStation ();

  void
  StartStation (const StartStation_type& x);

  void
  StartStation (::std::auto_ptr< StartStation_type > p);

  // EndStation
  // 
  typedef ::OpenBridgeML::Units::LengthValueType EndStation_type;
  typedef ::xsd::cxx::tree::traits< EndStation_type, wchar_t > EndStation_traits;

  const EndStation_type&
  EndStation () const;

  EndStation_type&
  EndStation ();

  void
  EndStation (const EndStation_type& x);

  void
  EndStation (::std::auto_ptr< EndStation_type > p);

  // NumSpaces
  // 
  typedef ::xml_schema::non_negative_integer NumSpaces_type;
  typedef ::xsd::cxx::tree::traits< NumSpaces_type, wchar_t > NumSpaces_traits;

  const NumSpaces_type&
  NumSpaces () const;

  NumSpaces_type&
  NumSpaces ();

  void
  NumSpaces (const NumSpaces_type& x);

  // Offset
  // 
  typedef ::OpenBridgeML::Units::LengthValueType Offset_type;
  typedef ::xsd::cxx::tree::traits< Offset_type, wchar_t > Offset_traits;

  const Offset_type&
  Offset () const;

  Offset_type&
  Offset ();

  void
  Offset (const Offset_type& x);

  void
  Offset (::std::auto_ptr< Offset_type > p);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  StationRangeType (const StartStation_type&,
                    const EndStation_type&,
                    const NumSpaces_type&,
                    const Offset_type&);

  StationRangeType (::std::auto_ptr< StartStation_type >&,
                    ::std::auto_ptr< EndStation_type >&,
                    const NumSpaces_type&,
                    ::std::auto_ptr< Offset_type >&);

  StationRangeType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  StationRangeType (const StationRangeType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual StationRangeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~StationRangeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< StartStation_type > StartStation_;
  ::xsd::cxx::tree::one< EndStation_type > EndStation_;
  ::xsd::cxx::tree::one< NumSpaces_type > NumSpaces_;
  ::xsd::cxx::tree::one< Offset_type > Offset_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS SkewLinesType: public ::xml_schema::type
{
  public:
  // SkewLine
  // 
  typedef ::SkewLineType SkewLine_type;
  typedef ::xsd::cxx::tree::sequence< SkewLine_type > SkewLine_sequence;
  typedef SkewLine_sequence::iterator SkewLine_iterator;
  typedef SkewLine_sequence::const_iterator SkewLine_const_iterator;
  typedef ::xsd::cxx::tree::traits< SkewLine_type, wchar_t > SkewLine_traits;

  const SkewLine_sequence&
  SkewLine () const;

  SkewLine_sequence&
  SkewLine ();

  void
  SkewLine (const SkewLine_sequence& s);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  SkewLinesType ();

  SkewLinesType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  SkewLinesType (const SkewLinesType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual SkewLinesType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SkewLinesType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  SkewLine_sequence SkewLine_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS OffsetType: public ::xml_schema::string
{
  public:
  enum value
  {
    RadialFromCrownLine,
    AlongSkewFromLLine
  };

  OffsetType (value v);

  OffsetType (const wchar_t* v);

  OffsetType (const ::std::wstring& v);

  OffsetType (const ::xml_schema::string& v);

  OffsetType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  OffsetType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  OffsetType (const ::std::wstring& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  OffsetType (const OffsetType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual OffsetType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OffsetType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OffsetType_convert ();
  }

  protected:
  value
  _xsd_OffsetType_convert () const;

  public:
  static const wchar_t* const _xsd_OffsetType_literals_[2];
  static const value _xsd_OffsetType_indexes_[2];
};

class BETOOLBOXXMLCLASS SkewAngleType: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SkewAngleType ();

  SkewAngleType (const wchar_t*);

  SkewAngleType (const ::std::wstring&);

  SkewAngleType (const ::xml_schema::string&);

  SkewAngleType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  SkewAngleType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  SkewAngleType (const ::std::wstring& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  SkewAngleType (const SkewAngleType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual SkewAngleType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SkewAngleType ();
};

class BETOOLBOXXMLCLASS SkewLineType: public ::xml_schema::type
{
  public:
  // Station
  // 
  typedef ::OpenBridgeML::Units::LengthValueType Station_type;
  typedef ::xsd::cxx::tree::traits< Station_type, wchar_t > Station_traits;

  const Station_type&
  Station () const;

  Station_type&
  Station ();

  void
  Station (const Station_type& x);

  void
  Station (::std::auto_ptr< Station_type > p);

  // OffsetType
  // 
  typedef ::OffsetType OffsetType_type;
  typedef ::xsd::cxx::tree::traits< OffsetType_type, wchar_t > OffsetType_traits;

  const OffsetType_type&
  OffsetType () const;

  OffsetType_type&
  OffsetType ();

  void
  OffsetType (const OffsetType_type& x);

  void
  OffsetType (::std::auto_ptr< OffsetType_type > p);

  // Offset
  // 
  typedef ::OpenBridgeML::Units::LengthValueType Offset_type;
  typedef ::xsd::cxx::tree::traits< Offset_type, wchar_t > Offset_traits;

  const Offset_type&
  Offset () const;

  Offset_type&
  Offset ();

  void
  Offset (const Offset_type& x);

  void
  Offset (::std::auto_ptr< Offset_type > p);

  // SkewAngle
  // 
  typedef ::SkewAngleType SkewAngle_type;
  typedef ::xsd::cxx::tree::traits< SkewAngle_type, wchar_t > SkewAngle_traits;

  const SkewAngle_type&
  SkewAngle () const;

  SkewAngle_type&
  SkewAngle ();

  void
  SkewAngle (const SkewAngle_type& x);

  void
  SkewAngle (::std::auto_ptr< SkewAngle_type > p);

  // Radius
  // 
  typedef ::OpenBridgeML::Units::LengthValueType Radius_type;
  typedef ::xsd::cxx::tree::traits< Radius_type, wchar_t > Radius_traits;

  const Radius_type&
  Radius () const;

  Radius_type&
  Radius ();

  void
  Radius (const Radius_type& x);

  void
  Radius (::std::auto_ptr< Radius_type > p);

  // CrownOffset
  // 
  typedef ::OpenBridgeML::Units::LengthValueType CrownOffset_type;
  typedef ::xsd::cxx::tree::traits< CrownOffset_type, wchar_t > CrownOffset_traits;

  const CrownOffset_type&
  CrownOffset () const;

  CrownOffset_type&
  CrownOffset ();

  void
  CrownOffset (const CrownOffset_type& x);

  void
  CrownOffset (::std::auto_ptr< CrownOffset_type > p);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  SkewLineType (const Station_type&,
                const OffsetType_type&,
                const Offset_type&,
                const SkewAngle_type&,
                const Radius_type&,
                const CrownOffset_type&);

  SkewLineType (::std::auto_ptr< Station_type >&,
                const OffsetType_type&,
                ::std::auto_ptr< Offset_type >&,
                const SkewAngle_type&,
                ::std::auto_ptr< Radius_type >&,
                ::std::auto_ptr< CrownOffset_type >&);

  SkewLineType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  SkewLineType (const SkewLineType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual SkewLineType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SkewLineType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Station_type > Station_;
  ::xsd::cxx::tree::one< OffsetType_type > OffsetType_;
  ::xsd::cxx::tree::one< Offset_type > Offset_;
  ::xsd::cxx::tree::one< SkewAngle_type > SkewAngle_;
  ::xsd::cxx::tree::one< Radius_type > Radius_;
  ::xsd::cxx::tree::one< CrownOffset_type > CrownOffset_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class BETOOLBOXXMLCLASS Curvel: public ::xml_schema::type
{
  public:
  // UnitsDeclaration
  // 
  typedef ::OpenBridgeML::Units::UnitsDeclarationType UnitsDeclaration_type;
  typedef ::xsd::cxx::tree::optional< UnitsDeclaration_type > UnitsDeclaration_optional;
  typedef ::xsd::cxx::tree::traits< UnitsDeclaration_type, wchar_t > UnitsDeclaration_traits;

  const UnitsDeclaration_optional&
  UnitsDeclaration () const;

  UnitsDeclaration_optional&
  UnitsDeclaration ();

  void
  UnitsDeclaration (const UnitsDeclaration_type& x);

  void
  UnitsDeclaration (const UnitsDeclaration_optional& x);

  void
  UnitsDeclaration (::std::auto_ptr< UnitsDeclaration_type > p);

  // VerticalCurveData
  // 
  typedef ::VerticalCurveDataType VerticalCurveData_type;
  typedef ::xsd::cxx::tree::traits< VerticalCurveData_type, wchar_t > VerticalCurveData_traits;

  const VerticalCurveData_type&
  VerticalCurveData () const;

  VerticalCurveData_type&
  VerticalCurveData ();

  void
  VerticalCurveData (const VerticalCurveData_type& x);

  void
  VerticalCurveData (::std::auto_ptr< VerticalCurveData_type > p);

  // SuperelevationData
  // 
  typedef ::SuperelevationDataType SuperelevationData_type;
  typedef ::xsd::cxx::tree::optional< SuperelevationData_type > SuperelevationData_optional;
  typedef ::xsd::cxx::tree::traits< SuperelevationData_type, wchar_t > SuperelevationData_traits;

  const SuperelevationData_optional&
  SuperelevationData () const;

  SuperelevationData_optional&
  SuperelevationData ();

  void
  SuperelevationData (const SuperelevationData_type& x);

  void
  SuperelevationData (const SuperelevationData_optional& x);

  void
  SuperelevationData (::std::auto_ptr< SuperelevationData_type > p);

  // IndividualStations
  // 
  typedef ::IndividualStationsType IndividualStations_type;
  typedef ::xsd::cxx::tree::optional< IndividualStations_type > IndividualStations_optional;
  typedef ::xsd::cxx::tree::traits< IndividualStations_type, wchar_t > IndividualStations_traits;

  const IndividualStations_optional&
  IndividualStations () const;

  IndividualStations_optional&
  IndividualStations ();

  void
  IndividualStations (const IndividualStations_type& x);

  void
  IndividualStations (const IndividualStations_optional& x);

  void
  IndividualStations (::std::auto_ptr< IndividualStations_type > p);

  // StationRanges
  // 
  typedef ::StationRangesType StationRanges_type;
  typedef ::xsd::cxx::tree::optional< StationRanges_type > StationRanges_optional;
  typedef ::xsd::cxx::tree::traits< StationRanges_type, wchar_t > StationRanges_traits;

  const StationRanges_optional&
  StationRanges () const;

  StationRanges_optional&
  StationRanges ();

  void
  StationRanges (const StationRanges_type& x);

  void
  StationRanges (const StationRanges_optional& x);

  void
  StationRanges (::std::auto_ptr< StationRanges_type > p);

  // SkewLines
  // 
  typedef ::SkewLinesType SkewLines_type;
  typedef ::xsd::cxx::tree::optional< SkewLines_type > SkewLines_optional;
  typedef ::xsd::cxx::tree::traits< SkewLines_type, wchar_t > SkewLines_traits;

  const SkewLines_optional&
  SkewLines () const;

  SkewLines_optional&
  SkewLines ();

  void
  SkewLines (const SkewLines_type& x);

  void
  SkewLines (const SkewLines_optional& x);

  void
  SkewLines (::std::auto_ptr< SkewLines_type > p);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

  const version_type&
  version () const;

  static version_type
  version_default_value ();

  // Constructors.
  //
  Curvel (const VerticalCurveData_type&);

  Curvel (::std::auto_ptr< VerticalCurveData_type >&);

  Curvel (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Curvel (const Curvel& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Curvel*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Curvel ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
         ::xml_schema::flags);

  protected:
  UnitsDeclaration_optional UnitsDeclaration_;
  ::xsd::cxx::tree::one< VerticalCurveData_type > VerticalCurveData_;
  SuperelevationData_optional SuperelevationData_;
  IndividualStations_optional IndividualStations_;
  StationRanges_optional StationRanges_;
  SkewLines_optional SkewLines_;
  ::xsd::cxx::tree::one< version_type > version_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (const ::std::wstring& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (const ::std::wstring& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (const ::std::wstring& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::std::istream& is,
         const ::std::wstring& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::std::istream& is,
         const ::std::wstring& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::std::istream& is,
         const ::std::wstring& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

BETOOLBOXXMLCLASS
::std::auto_ptr< ::Curvel >
Curvel_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

BETOOLBOXXMLCLASS
void
Curvel_ (::std::ostream& os,
         const ::Curvel& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::wstring& e = L"UTF-8",
         ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
Curvel_ (::std::ostream& os,
         const ::Curvel& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::wstring& e = L"UTF-8",
         ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
Curvel_ (::std::ostream& os,
         const ::Curvel& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::wstring& e = L"UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

BETOOLBOXXMLCLASS
void
Curvel_ (::xercesc::XMLFormatTarget& ft,
         const ::Curvel& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::wstring& e = L"UTF-8",
         ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
Curvel_ (::xercesc::XMLFormatTarget& ft,
         const ::Curvel& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::wstring& e = L"UTF-8",
         ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
Curvel_ (::xercesc::XMLFormatTarget& ft,
         const ::Curvel& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::wstring& e = L"UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

BETOOLBOXXMLCLASS
void
Curvel_ (::xercesc::DOMDocument& d,
         const ::Curvel& x,
         ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

BETOOLBOXXMLCLASS
::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
Curvel_ (const ::Curvel& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const VerticalCurveDataType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const SuperelevationDataType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const CrownSlopeType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const SuperelevationProfilePointType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const IndividualStationsType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const IndividualStationType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const StationRangesType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const StationRangeType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const SkewLinesType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const OffsetType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMAttr&, const OffsetType&);

BETOOLBOXXMLCLASS
void
operator<< (::xml_schema::list_stream&,
            const OffsetType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const SkewAngleType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMAttr&, const SkewAngleType&);

BETOOLBOXXMLCLASS
void
operator<< (::xml_schema::list_stream&,
            const SkewAngleType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const SkewLineType&);

BETOOLBOXXMLCLASS
void
operator<< (::xercesc::DOMElement&, const Curvel&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CURVEL_VERSION_2_0_HXX
